module vga_text_avl_interface (
	// Avalon Clock Input, note this clock is also used for VGA, so this must be 50Mhz
	// We can put a clock divider here in the future to make this IP more generalizable
	input logic CLK,
	
	// Avalon Reset Input
	input logic RESET,
	
	// Avalon-MM Slave Signals
	input  logic AVL_READ,					// Avalon-MM Read
	input  logic AVL_WRITE,					// Avalon-MM Write
	input  logic AVL_CS,					// Avalon-MM Chip Select
	input  logic [3:0] AVL_BYTE_EN,			// Avalon-MM Byte Enable
	input  logic [11:0] AVL_ADDR,			// Avalon-MM Address
	input  logic [31:0] AVL_WRITEDATA,		// Avalon-MM Write Data
	output logic [31:0] AVL_READDATA,		// Avalon-MM Read Data
	
	// Exported Conduit (mapped to VGA port - make sure you export in Platform Designer)
	output logic [3:0]  red, green, blue,	// VGA color channels (mapped to output pins in top-level)
	output logic hs, vs,					// VGA HS/VS
	output logic sync, blank, pixel_clk		// Required by DE2-115 video encoder
);

//put other local variables here
//logic color;
logic [9:0] DrawX, DrawY;

// size to be adjust in the furture.
parameter BLOCK_WIDTH = 16;
parameter [2:0] block_type = 3'b000;

logic surface_x, surface_y;
logic [11:0] palette_color, color;
logic [10:0] texture_address;
logic [7:0] palette_address, texture_data;
   
logic [3:0] texture_u, texture_v;
logic [2:0] texture_id;

//always_comb begin
//	texture_id = 1;
//end


texture_rom texture_rom(.clk(CLK), .id(texture_id), .x(qu[0]), .y(qv[0]), .data(texture_data));

logic [7:0] texture_data_sh;
//Declare submodules..e.g. VGA controller, ROMS, etc
vga_controller vga_controller(.Clk(CLK), .Reset(RESET), .hs, .vs, .pixel_clk, .blank, .sync, .DrawX, .DrawY);


logic [15:0] read_addr, write_addr;
logic wren;
logic [7:0] frame_buffer_data;



parameter LENGTH = 320;
parameter WIDTH = 180;
logic DrawBackground, FrameComplete;
logic [8:0] BackX, BackY;
logic [3:0] SurfX, SurfY;

logic DrawVertice, DrawSurface, DrawBlocks, DrawSelected;
parameter SIZE = 16;


initial begin
    FrameComplete = 1;
end

logic [23:0] E  = 24'h000000;   // eye point (0, 0, 0)
logic [31:0] v1 = 32'h01010200; // (1, 0, 1) uv = (0, 0)

//logic [31:0] v2 = 32'h01000400; // (0, 0, 8) uv = (0, 0)
//logic [31:0] v3 = 32'h02000400; // (0, 0, 8) uv = (0, 0)
//logic [31:0] v4 = 32'h02010400; // (0, 0, 8) uv = (0, 0)

logic signed [23:0] vx[8], vy[8], vz[8];
int vx_view[8], vy_view[8], vz_view[8];

logic [31:0] blocks[8];
logic [4:0] block_id;
parameter block_number = 7;

parameter [0:1][23:0] BLOCK_FACE_ID = {
	24'h000000,
	24'h110112,
};

always_comb begin
	if (surface_id == 0) 
		texture_id = BLOCK_FACE_ID[blocks[block_id][4:0]][23:20];
	else if (surface_id == 1) 
		texture_id = BLOCK_FACE_ID[blocks[block_id][4:0]][19:16];
	else if (surface_id == 2) 
		texture_id = BLOCK_FACE_ID[blocks[block_id][4:0]][15:12];
	else if (surface_id == 3) 
		texture_id = BLOCK_FACE_ID[blocks[block_id][4:0]][11: 8];
	else if (surface_id == 4) 
		texture_id = BLOCK_FACE_ID[blocks[block_id][4:0]][ 7: 4];
	else if (surface_id == 5) 
		texture_id = BLOCK_FACE_ID[blocks[block_id][4:0]][ 3: 0];
	else 
		texture_id = 0;
	
end

always_comb begin
	blocks[0] = 32'h01010200;
	blocks[1] = 32'h02010201;
	blocks[2] = 32'h01020201;
	blocks[3] = 32'h01010301;
	blocks[4] = 32'h00010201;
	blocks[5] = 32'h01010101;
	blocks[6] = 32'h01000200;
	blocks[7] = target_block;
end


always_comb begin // front case
	vx[0] = blocks[block_id][31:24] 			;  	// (0, 0, 0)
	vy[0] = blocks[block_id][23:16] 			;
	vz[0] = blocks[block_id][15:8 ] 			;

	vx[3'b001] = vx[0]		;
	vy[3'b001] = vy[0]		;
	vz[3'b001] = vz[0] + 1	;

	vx[3'b010] = vx[0]		;
	vy[3'b010] = vy[0] + 1	;
	vz[3'b010] = vz[0]    	;

	vx[3'b011] = vx[0]		;
	vy[3'b011] = vy[0] + 1	;
	vz[3'b011] = vz[0] + 1 	;

	vx[3'b100] = vx[0] + 1 	;
	vy[3'b100] = vy[0] 		;
	vz[3'b100] = vz[0]  		;

	vx[3'b101] = vx[0] + 1	;
	vy[3'b101] = vy[0]   	;
	vz[3'b101] = vz[0] + 1 	;
		
	vx[3'b110] = vx[0] + 1	;
	vy[3'b110] = vy[0] + 1	;
	vz[3'b110] = vz[0]     	;

	vx[3'b111] = vx[0] + 1  ;
	vy[3'b111] = vy[0] + 1	;
	vz[3'b111] = vz[0] + 1 	;

end	 

logic oe;
logic [3:0] surface_counter;
logic signed [9:0] sx, sy, x_screen[8], y_screen[8];

logic signed [9:0] x0, x1, x2, x3, y0, y1, y2, y3, x_min, x_max, y_min, y_max,
					    x_min_l, x_min_r, x_max_l, x_max_r, y_min_l, y_min_r, y_max_l, y_max_r;

parameter [0:5][11:0] surface_vertices = {
	12'b010000100110, // front 	2-0-4-6
	12'b011001000010, // left  	3-1-0-2
	12'b001000100101, // bottom 	1-0-4-5
	
	12'b111101001011, // behind	7-5-1-3
	12'b110100101111, // right		6-4-5-7
	12'b011010110111  // top 		3-2-6-7
};

int cx = 2 << 13; // 0.5 // 0.125 for a frame is reasonable
int cy = 6 << 13; // 0.5
int cz = 3 << 13; // 0.5

logic [8:0] theta1;
logic [8:0] theta2;

int cos_theta1; // = 59870;  // thera1 = 0 around y axis
int sin_theta1; // = 26655;
int cos_theta2; // = 59870;  // thera2 = 0 around x axis
int sin_theta2; // = 26655;

always_comb begin
	theta1 = 9'b000011110;
	theta2 = 9'b000011110;
end

cos_rom(.angle(theta1), .cos_value(cos_theta1));
cos_rom(.angle(theta2), .cos_value(cos_theta2));
sin_rom(.angle(theta1), .sin_value(sin_theta1));
sin_rom(.angle(theta2), .sin_value(sin_theta2));

v_transformation(.*, .x(vx[0]), .y(vy[0]), .z(vz[0]), .x_view(vx_view[0]), .y_view(vy_view[0]), .z_view(vz_view[0]));
v_transformation(.*, .x(vx[1]), .y(vy[1]), .z(vz[1]), .x_view(vx_view[1]), .y_view(vy_view[1]), .z_view(vz_view[1]));
v_transformation(.*, .x(vx[2]), .y(vy[2]), .z(vz[2]), .x_view(vx_view[2]), .y_view(vy_view[2]), .z_view(vz_view[2]));
v_transformation(.*, .x(vx[3]), .y(vy[3]), .z(vz[3]), .x_view(vx_view[3]), .y_view(vy_view[3]), .z_view(vz_view[3]));
v_transformation(.*, .x(vx[4]), .y(vy[4]), .z(vz[4]), .x_view(vx_view[4]), .y_view(vy_view[4]), .z_view(vz_view[4]));
v_transformation(.*, .x(vx[5]), .y(vy[5]), .z(vz[5]), .x_view(vx_view[5]), .y_view(vy_view[5]), .z_view(vz_view[5]));
v_transformation(.*, .x(vx[6]), .y(vy[6]), .z(vz[6]), .x_view(vx_view[6]), .y_view(vy_view[6]), .z_view(vz_view[6]));
v_transformation(.*, .x(vx[7]), .y(vy[7]), .z(vz[7]), .x_view(vx_view[7]), .y_view(vy_view[7]), .z_view(vz_view[7]));


p_transformation(.CLK, .OE(oe), .x(vx_view[0]), .y(vy_view[0]), .z(vz_view[0]), .x_screen(x_screen[0]), .y_screen(y_screen[0]));
p_transformation(.CLK, .OE(oe), .x(vx_view[1]), .y(vy_view[1]), .z(vz_view[1]), .x_screen(x_screen[1]), .y_screen(y_screen[1]));
p_transformation(.CLK, .OE(oe), .x(vx_view[2]), .y(vy_view[2]), .z(vz_view[2]), .x_screen(x_screen[2]), .y_screen(y_screen[2]));
p_transformation(.CLK, .OE(oe), .x(vx_view[3]), .y(vy_view[3]), .z(vz_view[3]), .x_screen(x_screen[3]), .y_screen(y_screen[3]));
p_transformation(.CLK, .OE(oe), .x(vx_view[4]), .y(vy_view[4]), .z(vz_view[4]), .x_screen(x_screen[4]), .y_screen(y_screen[4]));
p_transformation(.CLK, .OE(oe), .x(vx_view[5]), .y(vy_view[5]), .z(vz_view[5]), .x_screen(x_screen[5]), .y_screen(y_screen[5]));
p_transformation(.CLK, .OE(oe), .x(vx_view[6]), .y(vy_view[6]), .z(vz_view[6]), .x_screen(x_screen[6]), .y_screen(y_screen[6]));
p_transformation(.CLK, .OE(oe), .x(vx_view[7]), .y(vy_view[7]), .z(vz_view[7]), .x_screen(x_screen[7]), .y_screen(y_screen[7]));

logic [9:0] qx[8], qy[8];
logic [3:0] qu[8], qv[8];
logic [15:0] qz[8];
logic is_inside;
logic ins[8];

// front
texture_mapping(.*, 	.x0, .y0, .u0(0), .v0(0), 
							.x1, .y1, .u1(0), .v1(15),
							.x2, .y2, .u2(15), .v2(15),
							.x3, .y3, .u3(15), .v3(0),
							.qx(qx[0]), .qy(qy[0]), 
							.z0, .z1, .z2, .z3,
							.is_inside(ins[0]), .qu(qu[0]), .qv(qv[0]), .qz(qz[0]));

texture_mapping(.*, 	.x0, .y0, .u0(0), .v0(0), 
							.x1, .y1, .u1(0), .v1(15),
							.x2, .y2, .u2(15), .v2(15),
							.x3, .y3, .u3(15), .v3(0),
							.qx(qx[1]), .qy(qy[1]),
							.z0, .z1, .z2, .z3,	
							.is_inside(ins[1]), .qu(qu[1]), .qv(qv[1]), .qz(qz[1]));
							
texture_mapping(.*, 	.x0, .y0, .u0(0), .v0(0), 
							.x1, .y1, .u1(0), .v1(15),
							.x2, .y2, .u2(15), .v2(15),
							.x3, .y3, .u3(15), .v3(0),
							.qx(qx[2]), .qy(qy[2]), 
							.z0, .z1, .z2, .z3,
							.is_inside(ins[2]), .qu(qu[2]), .qv(qv[2]), .qz(qz[2]));
							
texture_mapping(.*, 	.x0, .y0, .u0(0), .v0(0), 
							.x1, .y1, .u1(0), .v1(15),
							.x2, .y2, .u2(15), .v2(15),
							.x3, .y3, .u3(15), .v3(0),
							.qx(qx[3]), .qy(qy[3]), 
							.z0, .z1, .z2, .z3,
							.is_inside(ins[3]), .qu(qu[3]), .qv(qv[3]), .qz(qz[3]));

//point_in_quadrilateral (.*,	.qx(qx[0]), .qy(qy[0]), 
//										.is_inside(ins[0]));
//										
//point_in_quadrilateral (.*, 	.qx(qx[1]), .qy(qy[1]), 
//										.is_inside(ins[1]));
//										
//point_in_quadrilateral (.*, 	.qx(qx[2]), .qy(qy[2]), 
//										.is_inside(ins[2]));
//										
//point_in_quadrilateral (.*, 	.qx(qx[3]), .qy(qy[3]), 
//										.is_inside(ins[3]));

//assign surface_id = 1;
always_comb begin
	x0 = x_screen[surface_vertices[surface_id][11:9]];
	x1 = x_screen[surface_vertices[surface_id][8:6]];
	x2 = x_screen[surface_vertices[surface_id][5:3]];
	x3 = x_screen[surface_vertices[surface_id][2:0]];

	y0 = y_screen[surface_vertices[surface_id][11:9]];
	y1 = y_screen[surface_vertices[surface_id][8:6]];
	y2 = y_screen[surface_vertices[surface_id][5:3]];
	y3 = y_screen[surface_vertices[surface_id][2:0]];
	
	z0 = vz_view[surface_vertices[surface_id][11:9]][23:8];
	z1 = vz_view[surface_vertices[surface_id][8:6]][23:8];
	z2 = vz_view[surface_vertices[surface_id][5:3]][23:8];
	z3 = vz_view[surface_vertices[surface_id][2:0]][23:8];
	
	

	x_min_l = (x0 < x1) ? x0 : x1;
	x_min_r = (x2 < x3) ? x2 : x3;
	
	x_max_l = (x0 > x1) ? x0 : x1;
	x_max_r = (x2 > x3) ? x2 : x3;
	
	y_min_l = (y0 < y1) ? y0 : y1;
	y_min_r = (y2 < y3) ? y2 : y3;
	
	y_max_l = (y0 > y1) ? y0 : y1;
	y_max_r = (y2 > y3) ? y2 : y3;

	x_min = (x_min_l < x_min_r) ? x_min_l : x_min_r;
	x_max = (x_max_l > x_max_r) ? x_max_l : x_max_r;
	y_min = (y_min_l < y_min_r) ? y_min_l : y_min_r;
	y_max = (y_max_l > y_max_r) ? y_max_l : y_max_r;
end



z_buffer_ocm(
	.clock(CLK),
	.data(z_in),
	.rdaddress(z_buffer_read_addr),
	.wraddress(write_addr),
	.wren(wren),
	.q(z_out)
);

logic	[15:0]  z_in;
logic	[15:0]  z_buffer_read_addr;
logic	[15:0]  z_buffer_write_addr;
logic	  z_buffer_wren;
logic	signed [15:0]  z_value[8], z0, z1, z2, z3;


logic [15:0] z_out, z_out_sh, z_buffer[8];



							
logic wait_cycle, init_cycle, iteration_complete, wait_complete;
logic [4:0] wait_counter;
logic [4:0] id_counter;

parameter surface_num = 5; 
logic [7:0] surface_id;

logic [31:0] target_block;
logic [3:0] target_surface;

always_ff @(posedge pixel_clk) begin
	if (DrawX == 0 && DrawY == 0 && FrameComplete == 1) begin
		FrameComplete <= 0;
		DrawBackground <= 1'b1;
		DrawVertice <= 0;
		DrawSurface <= 0;
		DrawBlocks <= 0;
		DrawSelected <= 0;
		BackX <= 0;
		BackY <= 0;
		wren <= 1;
		write_addr <= 0;
		sx <= 9'b111111111;
		sy <= 9'b111111111;
		oe <= 0;
		surface_counter <= 0;
		target_block <= 32'h01000200;
		target_surface <= 0;
	end
	
	else begin
		if (DrawBackground) begin
			if (BackX == (LENGTH - 1)) begin
				BackX <= 0;
				if (BackY == (WIDTH - 1)) begin // complete drawing of background
					
					DrawBackground <= 0; // Background complete
//					DrawVertice <= 1;
					
//					BackY <= 0;
//					BackX <= x_screen[2];
//					BackY <= y_screen[2];

//					DrawBlocks <= 1;
					DrawSurface <= 1;
					init_cycle <= 1;
					wait_cycle <= 0;
					wait_counter <= 0;
					id_counter <= 0;
					iteration_complete <= 0;
					sx <= x_min;
					sy <= y_min; // tbm
					surface_id <= 0;
					wren <= 0;
					block_id <= 0;
				end else begin
					BackY <= (BackY + 1);
				end
			end else begin
				BackX <= (BackX + 1);
			end
			write_addr <= BackY * LENGTH + BackX;
			z_buffer_write_addr <= BackY * LENGTH + BackX;
			frame_buffer_data <= 8'b00000000;  // this store the sky color, need to modify
			z_in <= 16'b1111111111111111;
		end
		
		
		
//		else if (DrawVertice) begin
//			if (surface_counter == 8) begin
//				surface_counter <= 0;
//				wren <= 0;
//				DrawVertice <= 0;
//				
//				
//				DrawSurface <= 1;
////				DrawSurface <= 0;
//				init_cycle <= 1;
//				wait_cycle <= 0;
//				wait_counter <= 0;
//				id_counter <= 0;
//				iteration_complete <= 0;
//				sx <= x_min;
//				sy <= y_min; // tbm
//				surface_id <= 0;
//			end else begin
//				wren <= 1;
//				write_addr <= y_screen[surface_counter] * LENGTH + x_screen[surface_counter];
//				if (surface_counter[0] == 0) 
//					frame_buffer_data <= 1;
//				else
//					frame_buffer_data <= 3;
//				surface_counter <= (surface_counter + 1);
//			end
//		end
	
	
		else if (DrawSurface) begin
//			if (surface_id == 2) begin
			if (block_id == block_number) begin
				DrawSurface <= 0;
				DrawSelected <= 1;
				block_id <= 7;
				surface_id <= 0;
//				surface_id <= target_surface;
			end else begin
				if (surface_id == (surface_num + 1)) begin
//					DrawSurface <= 0;
					surface_id <= 0; 
					block_id <= (block_id + 1);
					
				end else begin
					// make all the uv-mapper work.
					if (init_cycle) begin
						if (id_counter == 1) begin
							id_counter <= 0; 
							init_cycle <= 0; 
							wait_cycle <= 1;
							wait_complete <= 0;
						
						end else begin
							if (sx == x_max) begin
								sx <= x_min;
								if (sy == y_max) begin
									sy <= y_min;
								end else begin
									sy <= (sy + 1);
								end
							end else begin
								sx <= (sx + 1);
							end					
							id_counter <= (id_counter + 1);
							qx[id_counter] <= sx;  // == prev_sx ?? can be moved to init but no big impact
							qy[id_counter] <= sy;
							
						end 
					end
		//		end
		//			// wait until uv-mapper complete calculation
					if (wait_cycle) begin
						if (wait_counter == 2) begin
							wait_cycle <= 0;
							wait_counter <= 0;
							if (iteration_complete == 1) begin
								wait_complete <= 1;
							end
						end else begin
							wait_counter = (wait_counter + 1);
						end
					// write to the ocm
					end else begin
						if (id_counter == 1) begin
							if (wait_complete) begin							
								init_cycle <= 1;
								wait_cycle <= 0;
								wait_counter <= 0;
								id_counter <= 0;
								iteration_complete <= 0;
								sx <= x_min;
								sy <= y_min; // tbm
							end
							wren <= 0;
							id_counter <= 0;
							wait_cycle <= 1;
						end else begin
							if (sx == x_max) begin
								sx <= x_min;
								if (sy == y_max) begin
									sy <= y_min;
									iteration_complete <= 1;
									surface_id <= (surface_id + 1);
								end else begin
									sy <= (sy + 1);
								end
							end else begin
								sx <= (sx + 1);
							end
							if (ins[id_counter] && (qz[id_counter] <= z_out_sh)) begin// in quad and z-depth is smaller
								wren <= 1;
								if ((qx[id_counter] == 160) && (qy[id_counter] == 90)) begin
									target_block <= blocks[block_id];
									target_surface <= surface_id;
								end
							end else begin
								wren <= 0;
							end
							id_counter <= (id_counter + 1);
							// get uv for the current pixel
							qx[id_counter] <= sx;
							qy[id_counter] <= sy;
							
							
							// write the color of the pixel to frame buffer
							write_addr <= (qy[id_counter]) * LENGTH + (qx[id_counter]);
							texture_u = qu[id_counter]; // not sure
							texture_v = qv[id_counter];		
							frame_buffer_data <= texture_data_sh; // (4 * (surface_id + 1)); // texture_data; // surface_id; // texture_data;
							
							z_in <= qz[id_counter]; // surface_id;
							
						end
					end
				end
			end
		end 
		
		else if (DrawSelected == 1) begin
			if (surface_id == (surface_num + 1)) begin
					DrawSelected <= 0;
					surface_id <= 0; 
					block_id <= (block_id + 1);
					
				end else begin
					// make all the uv-mapper work.
					if (init_cycle) begin
						if (id_counter == 1) begin
							id_counter <= 0; 
							init_cycle <= 0; 
							wait_cycle <= 1;
							wait_complete <= 0;
						
						end else begin
							if (sx == x_max) begin
								sx <= x_min;
								if (sy == y_max) begin
									sy <= y_min;
								end else begin
									sy <= (sy + 1);
								end
							end else begin
								sx <= (sx + 1);
							end					
							id_counter <= (id_counter + 1);
							qx[id_counter] <= sx;  // == prev_sx ?? can be moved to init but no big impact
							qy[id_counter] <= sy;
							
						end 
					end
		//		end
		//			// wait until uv-mapper complete calculation
					if (wait_cycle) begin
						if (wait_counter == 2) begin
							wait_cycle <= 0;
							wait_counter <= 0;
							if (iteration_complete == 1) begin
								wait_complete <= 1;
							end
						end else begin
							wait_counter = (wait_counter + 1);
						end
					// write to the ocm
					end else begin
						if (id_counter == 1) begin
							if (wait_complete) begin							
								init_cycle <= 1;
								wait_cycle <= 0;
								wait_counter <= 0;
								id_counter <= 0;
								iteration_complete <= 0;
								sx <= x_min;
								sy <= y_min; // tbm
							end
							wren <= 0;
							id_counter <= 0;
							wait_cycle <= 1;
						end else begin
							if (sx == x_max) begin
								sx <= x_min;
								if (sy == y_max) begin
									sy <= y_min;
									iteration_complete <= 1;
									surface_id <= (surface_id + 1);
								end else begin
									sy <= (sy + 1);
								end
							end else begin
								sx <= (sx + 1);
							end
							if (ins[id_counter] && (qz[id_counter] <= z_out_sh) ) 
//							&& ((qu[id_counter] == 0) || (qu[id_counter] == 4'b1111) 
//							||  (qv[id_counter] == 0) || (qv[id_counter] == 4'b1111))) // in quad and z-depth is smaller
								wren <= 1;
							else
								wren <= 0;
							id_counter <= (id_counter + 1);
							// get uv for the current pixel
							qx[id_counter] <= sx;
							qy[id_counter] <= sy;
							
							
							// write the color of the pixel to frame buffer
							write_addr <= (qy[id_counter]) * LENGTH + (qx[id_counter]);
							texture_u = qu[id_counter]; // not sure
							texture_v = qv[id_counter];		
							frame_buffer_data <= (texture_data_sh + 1); // surface_id; // texture_data;
							
							z_in <= qz[id_counter]; // surface_id;
							
						end
					end
				end
		end
		
		
		else begin // end drawing
			wren <= 0;
		end
		
	end
end


always_ff @(posedge pixel_clk) begin
	read_addr <= ((DrawY >> 1) * 320) + (DrawX >> 1);
	z_buffer_read_addr <= ((qy[0] * LENGTH) + qx[0]);
end

always_ff @(posedge CLK) begin
	z_out_sh <= z_out;
	texture_data_sh <= texture_data;
end


double_frame_buffer dfb(.pixel_clk(CLK), .RESET, .wren, .switch_buffer(vs), .frame_buffer_data, .read_addr, .write_addr, .palette_color);

always_ff @(posedge pixel_clk) begin
	if (DrawY <= 355) begin
		if ((DrawX >= 316) && (DrawX <= 322)) begin
			if (DrawY == 179) begin
				color <= 12'b100110011001;
			end else if ((DrawY >= 176) && (DrawY <= 182) && (DrawX == 319)) begin
				color <= 12'b100110011001;
			end else begin
				color <= palette_color;
			end
		end else begin
			color <= palette_color;
		end
	end else if (DrawY == 356) begin
		color <= 12'b001100110011;
	end else if (DrawY == 357) begin
		color <= 12'b111011101110;
	end else begin
		if (DrawX < 484) begin
			if (DrawY > 360) begin
				if (DrawY[4:0] == 0) begin // white light
					color <= 12'b111011101110;
				end else if (DrawY[4:0] >= 1 && DrawY[4:0] < 4) begin // orignal color
					color <= 12'b110111011101;
				end else if (DrawY[4:0] == 4) begin	// nearly black for shader
					color <= 12'b001100110011;
				end else begin
					if (DrawX[4:0] == 0) begin
						color <= 12'b111011101110;
					end else if (DrawX[4:0] >= 1 && DrawX[4:0] < 4) begin
						color <= 12'b110111011101;
					end else if (DrawX[4:0]  == 4) begin
						color <= 12'b001100110011;
					end else begin
						color <= 12'b100010001000;
					end
				end
			end
		end else begin
			color <= 12'b110011001100;
		end
	end
end



//	end
//	if (DrawX >= 0 & DrawX < 640 & DrawY >= 0 & DrawY < 360) begin
//		color <= palette_color;
//	end
//	else begin
//		color <= 12'b000000000000;
//	end
//end
		

//always_ff @(posedge pixel_clk) begin
always_comb begin
    if (!DrawX) begin
        red   = 8'h00; // Non-blocking assignment
        green = 8'h00;
        blue  = 8'h00;
    end
    else if (!blank) begin
        red   = 8'h00;
        green = 8'h00;
        blue  = 8'h00;
    end
    else if (RESET) begin
        red   = 8'h00;
        green = 8'h00;
        blue  = 8'h00;
    end
    else begin
        red   = color[11:8]; // Extracting MSBs for red
        green = color[7:4];  // Extracting middle bits for green
        blue  = color[3:0];  // Extracting LSBs for blue
    end
end


endmodule

